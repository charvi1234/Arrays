/* https://leetcode.com/problems/split-array-into-consecutive-subsequences/ */

class Solution {
    public boolean isPossible(int[] nums) {
        HashMap<Integer, Integer> freq_map = new HashMap<>();
        HashMap<Integer, Integer> hyp_map = new HashMap<>();
        for(int i = 0; i < nums.length; i++)
        {
            if(freq_map.containsKey(nums[i]))
            {
                int cnt = freq_map.get(nums[i]);
                cnt++;
                freq_map.replace(nums[i], cnt);
            }
            else
            {
                freq_map.put(nums[i], 1);
            }
        }
        for(int i = 0; i < nums.length; i++)
        {
            if(freq_map.get(nums[i]) == 0)
            {
                continue;
            }
            if(hyp_map.containsKey(nums[i]) && hyp_map.get(nums[i]) > 0)
            {
                hyp_map.put(nums[i], hyp_map.get(nums[i])-1);
                if(hyp_map.containsKey(nums[i]+1))
                {
                    int cnt = hyp_map.get(nums[i]+1);
                    cnt++;
                    hyp_map.replace(nums[i]+1, cnt);
                }
                else
                {
                    hyp_map.put(nums[i]+1, 1);
                }
                freq_map.put(nums[i], freq_map.get(nums[i])-1);
            }
            else if(freq_map.getOrDefault(nums[i], 0) > 0 && freq_map.getOrDefault(nums[i]+1, 0) > 0 && freq_map.getOrDefault(nums[i]+2, 0) > 0)
            {
                freq_map.put(nums[i], freq_map.get(nums[i])-1);
                freq_map.put(nums[i]+1, freq_map.get(nums[i]+1)-1);
                freq_map.put(nums[i]+2, freq_map.get(nums[i]+2)-1);
                hyp_map.put(nums[i]+3, hyp_map.getOrDefault(nums[i]+3, 0)+ 1);
            }
            else
            {
                return false;
            }
        }
        return true;
    }
}